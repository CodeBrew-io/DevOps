- name: create deployment folder
  file: path={{ deployment_folder }} state=directory owner={{ user }} group={{ user }}

- name: clone project
  git: repo="{{ service_project_git_url }}" dest="{{ service_project_folder }}" version="{{ version }}"

- name: copy deployment key
  copy: src="{{private_key_path}}" dest="/home/{{ user }}/.ssh/id_rsa"

- name: clone secrets
  git: repo="{{ secret_url }}" dest="{{ secret_folder }}"
  when: "secret_url != ''"

- name: copy secrets
  shell: cp -fr {{ secret_folder }}/* {{ service_project_folder }}/{{ service_subproject_name }}/conf/
  when: "secret_url != ''"

- name: test project
  shell: cd {{ service_project_folder }} && sbt {{ service_subproject_name }}/test
  sudo: False

- name: package project
  shell: cd {{ service_project_folder }} && sbt {{ service_subproject_name }}/dist
  sudo: False

- name: always unzip fresh package when version is HEAD
  file: path={{ service_dest }} state=absent
  when: "version == 'HEAD'"

- name: unzip archive
  shell: > 
    cd {{ deployment_folder }} && 
    unzip {{ subproject_package_archive }} -d {{ service_dest_root }}
    creates={{ service_dest }}
  sudo: yes

- name: create service users
  user: name={{ service_user }} createhome=no shell=/sbin/nologin
  sudo: yes

- name: setup service user
  shell: chown -R {{ service_user }}:{{ service_user }} {{ service_dest }}
  sudo: yes

- name: stop current service
  service: name={{ service_name }} state=stopped
  sudo: yes

- name: install service
  template: src=service.sh dest=/etc/init.d/{{ service_name }} owner=root group=root mode=0755
  notify: restart service
  sudo: yes